@using FivePeaks.Shared.Models
@inject HttpClient Http
@inject IJSRuntime JsRuntime;

<div style="padding: 5px">

    <table style="width: 100%">
        <tr style="border-bottom: 2px solid dimgrey;">
            <th align="center" style="width:60px;text-align:center" hidden="@IsPublicView">Status</th>
            <th>Entry</th>
            <th>Time</th>
            <th align="center" style="text-align:center" hidden="@(!Helpers.SessionState.AdminLoggedIn)">Admin</th>
        </tr>
        @if (SubmissionsListForView.Count > 0)
        {
            foreach (var item in SubmissionsListForView)
            {
                string iconColour = item.Status switch
                {
                    LeaderboardEntryState.Pending => "grey",
                    LeaderboardEntryState.Accepted => "green",
                    LeaderboardEntryState.NeedMoreInfo => "orange",
                    LeaderboardEntryState.Rejected => "red",
                    _ => "grey"
                };
                TimeSpan totalTime = item.FinishTime - item.StartTime;
                <tr class="leaderboard-row hover-pointer">
                    <td valign="middle" align="center" hidden="@IsPublicView" @onclick="@(e => SelectedEntryForModal(item))">
                        <Tooltip Text="@StatusEnumString(item.Status)">
                            <MenuIcon FileName="@($"circle-{iconColour}.png")" />
                        </Tooltip>
                    </td>
                    <td valign="middle" @onclick="@(e => SelectedEntryForModal(item))">
                        <div>
                            @item.EntryName
                        </div>
                        <div style="font-size:12px; color: gray; font-style: italic;margin-bottom:5px">
                            @item.TrekDate.ToString("dd-MMM-yyyy")
                        </div>
                    </td>
                    <td width="95px" @onclick="@(e => SelectedEntryForModal(item))">
                        <div style="color: green;font-size: 15px;">
                            @($"{totalTime.Hours}hrs {totalTime.Minutes}m")
                        </div>
                    </td>
                    <td align="center" style="width:auto" hidden="@(!Helpers.SessionState.AdminLoggedIn)">
                        <Select TValue="int" SelectedValue="@((int)item.Status)" SelectedValueChanged="(val) => ToggleItemStatus(item, val)">
                            <SelectItem Value="@((int) LeaderboardEntryState.Accepted)">Accepted</SelectItem>
                            <SelectItem Value="@((int) LeaderboardEntryState.Pending)">Pending</SelectItem>
                            <SelectItem Value="@((int) LeaderboardEntryState.NeedMoreInfo)">Need Info</SelectItem>
                            <SelectItem Value="@((int) LeaderboardEntryState.Rejected)">Rejected</SelectItem>
                        </Select>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="4" style="font-style: italic">No Data!</td>
            </tr>
        }
    </table>

    @if (!IsPublicView)
    {
        <br />
        <br />
        <br />

        <div style="max-width:200px; margin: auto;">
            <Button Color="Color.Danger" style="width: 100%" @onclick="@CancelBtnClicked">Back</Button>
        </div>

        <br />
        <br />
        <br />
    }
</div>

<Modal @ref="_modalRef" Closing="@(OnModalClose)">
    <ModalBackdrop />
    @if (SelectedItem != null)
    {
        <ModalContent IsCentered="true" Size="ModalSize.ExtraLarge">
            <ModalHeader>
                <CloseButton Clicked="@HideModal" />
            </ModalHeader>
            <ModalBody Style="align-self:center;width:100%">
                @if (SelectedItem.Status != LeaderboardEntryState.Accepted)
                {
                    <div style="margin:auto; max-width: 400px; text-align: center;">
                        To prevent tampering during the verification process, you cannot edit a submission once it has been created
                        <br />
                        <br />
                        If you want to make changes, please delete this entry and submit a new one.
                        <br />
                        <br />
                        <div style="margin: auto; display: inline-block;">
                            <Button Color="Color.Danger" Size="ButtonSize.Small" @onclick="@(e => DeleteItem(SelectedItem.Id))">Delete</Button>
                        </div>
                    </div>
                }
                <SubmitRoute LeaderboardItemParam="@SelectedItem" User="@User" />
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideModal">Close</Button>
            </ModalFooter>
        </ModalContent>
    }
</Modal>


@code {


    [Parameter]
    public UserAccount User { get; set; } = new UserAccount { Id = 0, Username = "" };

    [Parameter]
    public Action BackToMenu { get; set; }

    [Parameter]
    public bool IsPublicView { get; set; }

    [Parameter]
    public Leaderboard.LeaderBoardFilter Filter { get; set; } = new Leaderboard.LeaderBoardFilter();

    [Parameter]
    public Action OnFilterChanged { get; set; }

    LeaderboardItem SelectedItem { get; set; }

    private string _responseMsg = "";
    private List<LeaderboardItem> _submissionsList;
    private List<LeaderboardItem> SubmissionsListForView { get; set; } = new List<LeaderboardItem>();
    private Modal _modalRef;

    protected override async Task OnInitializedAsync()
    {
        await GetSubmissions();
        await base.OnInitializedAsync();
    }

    private void CancelBtnClicked()
    {
        this.BackToMenu?.Invoke();
    }

    private void HideModal()
    {
        _modalRef.Hide();
    }

    private void ShowModal()
    {
        _modalRef.Show();
    }

    private void OnModalClose(ModalClosingEventArgs e)
    {
        SelectedItem = null;
    }

    private void SelectedEntryForModal(LeaderboardItem item)
    {
        SelectedItem = item;
        StateHasChanged();
        this.ShowModal();
    }

    public async void ToggleItemStatus(LeaderboardItem item, int val)
    {
        item.Status = (LeaderboardEntryState)val;
        Helpers.HttpPostHelper<object> req = new Helpers.HttpPostHelper<object>("Leaderboard/UpdateItem", item);

        BasicHttpResponse<object> resp = await req.SendAsync<object>(Http);

        if (resp.Ok)
        {
            await GetSubmissions();
            this.StateHasChanged();
        }
        else
        {
            _responseMsg = resp.Message;
        }
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_submissionsList != null)
        {
            IEnumerable<LeaderboardItem> items = _submissionsList.Where(i =>

                (i.EntryName.ToLower().Contains(Filter.Name?.ToLower() ?? "") || string.IsNullOrEmpty(Filter.Name))
                &&
                (i.Direction == (TrekDirection)Filter.Direction || Filter.Direction == (int)TrekDirection.Unknown)
                &&
                (i.Season == Filter.Season || Filter.Season == "Any")
                &&
                (
                    (Filter.HasGpxData && Filter.HasTcxData && (i.RouteDataType == ".gpx" || i.RouteDataType == ".tcx"))
                    ||
                    (Filter.HasGpxData && !Filter.HasTcxData && (i.RouteDataType == ".gpx"))
                    ||
                    (!Filter.HasGpxData && Filter.HasTcxData && (i.RouteDataType == ".tcx"))
                    ||
                    (!Filter.HasGpxData && !Filter.HasTcxData)
                    )
                );


            switch ((Leaderboard.LeaderBoardOrderByOption)Filter.OrderByOption)
            {
                case Leaderboard.LeaderBoardOrderByOption.Newest:
                    SubmissionsListForView = items.OrderByDescending(i => i.TrekDate).ToList();
                    break;

                case Leaderboard.LeaderBoardOrderByOption.Oldest:
                    SubmissionsListForView = items.OrderBy(i => i.TrekDate).ToList();
                    break;

                case Leaderboard.LeaderBoardOrderByOption.Fastest:
                    SubmissionsListForView = items.OrderBy(i => i.FinishTime - i.StartTime).ToList();
                    break;

                case Leaderboard.LeaderBoardOrderByOption.Slowest:
                    SubmissionsListForView = items.OrderByDescending(i => i.FinishTime - i.StartTime).ToList();
                    break;

                case Leaderboard.LeaderBoardOrderByOption.NameAtoZ:
                    SubmissionsListForView = items.OrderBy(i => i.EntryName).ToList();
                    break;

                case Leaderboard.LeaderBoardOrderByOption.NameZtoA:
                    SubmissionsListForView = items.OrderByDescending(i => i.EntryName).ToList();
                    break;

                case Leaderboard.LeaderBoardOrderByOption.Pending:
                    SubmissionsListForView = items.OrderByDescending(i => i.Status == LeaderboardEntryState.Pending)
                    .ThenByDescending(i => i.Status != LeaderboardEntryState.Accepted)
                    .ThenByDescending(i => i.TrekDate).ToList();
                    break;

                case Leaderboard.LeaderBoardOrderByOption.Rejected:
                    SubmissionsListForView = items.OrderByDescending(i => i.Status == LeaderboardEntryState.Rejected)
                    .ThenByDescending(i => i.Status != LeaderboardEntryState.Accepted)
                    .ThenByDescending(i => i.TrekDate).ToList();
                    break;

                case Leaderboard.LeaderBoardOrderByOption.NeedsInfo:
                    SubmissionsListForView = items.OrderByDescending(i => i.Status == LeaderboardEntryState.NeedMoreInfo)
                    .ThenByDescending(i => i.Status != LeaderboardEntryState.Accepted)
                    .ThenByDescending(i => i.TrekDate).ToList();
                    break;

                default:
                    SubmissionsListForView = items.OrderByDescending(i => i.TrekDate).ToList();
                    break;
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    async void DeleteItem(int id)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");

        if (confirmed)
        {
            BasicHttpResponse<object> resp = await Http.GetFromJsonAsync<BasicHttpResponse<object>>($"Leaderboard/DeleteItem/{id}");

            if (resp.Ok)
            {
                _submissionsList.Remove(_submissionsList.FirstOrDefault(b => b.Id == id));
                SelectedItem = null;
                this.StateHasChanged();
                HideModal();
            }
        }
    }

    private string StatusEnumString(LeaderboardEntryState s)
    {
        return s switch
        {
            LeaderboardEntryState.Pending => "Pending",
            LeaderboardEntryState.Rejected => "Rejected",
            LeaderboardEntryState.NeedMoreInfo => "Needs Info",
            LeaderboardEntryState.Accepted => "Accepted"
        };
    }

    private async Task GetSubmissions()
    {
        try
        {
            _responseMsg = "";
            int userID = Helpers.SessionState.AdminLoggedIn ? -1 : User.Id;
            BasicHttpResponse<List<LeaderboardItem>> resp = await Http.GetFromJsonAsync<BasicHttpResponse<List<LeaderboardItem>>>($"Leaderboard/GetSubmissions/{userID}");

            _responseMsg = resp.Message;

            if (resp.Ok)
            {
                _submissionsList = resp.Data;
                this.StateHasChanged();
            }
            else
                throw new Exception(resp.Message);
        }
        catch (Exception e)
        {
            _responseMsg = e.Message;
        }
    }

}
