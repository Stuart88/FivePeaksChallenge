@using FivePeaks.Shared.Models
@using FivePeaks.Client.Helpers
@inject HttpClient Http

<div class="fully-centred full-page-width" style="max-width: 400px;padding:10px" hidden="@Hidden">


    

    @if (showLoader)
    {
        <div style="margin:auto; display: flex; justify-content: center; flex-direction: column; align-items: center;">
            <img style="width: 100px; height: 100px; align-self: center" src="/images/icons/loading.gif" />
        </div>
    }
    else
    {
        if (!FivePeaks.Client.Helpers.SessionState.UserLoggedIn)
        {
            <img style="max-height:100px; max-width: 100px;margin:auto;margin-bottom:50px" src="@ServerHelpers.ImageSrcString("icons/logo.png")" />

            <div>
                Login to the user area to submit your own Five Peaks Challenge details for the leaderboard
            </div>

            <br />
            <br />
            <br />

            <Button Color="Color.Primary" Clicked="@SubmitLogin">Login</Button>

            <br />
            <table>
                <tr>
                    <td valign="middle"><MenuIcon FileName="facebook.png" /></td>
                    <td valign="middle">
                        <div style="color: grey; padding-left: 3px; padding-top: 5px; font-size: 12px; width: 240px">
                            Uses Facebook Login for safe authentication
                        </div>
                    </td>
                </tr>
            </table>

        }
        else if (ShowLogout)
        {
            <Button Color="Color.Danger" Clicked="@SubmitLogout">Logout</Button>
        }
    }

    <br />
    <div style="color:goldenrod">@_responseMsg</div>
</div>

@code {

    [Parameter] public bool ShowLogout { get; set; }
    [Parameter] public Action OnLogin { get; set; }
    [Parameter] public Action OnLogout { get; set; }
    [Parameter] public bool Hidden { get; set; }

    string _username;
    string _password;
    bool _loggedIn;
    static string _responseMsg = "";
    private static Action<bool> loginResultAction;
    private static Action<bool> logoutResultAction;
    private static Action<string> updateUserAction;
    public bool showLoader = true;

    [Inject]
    IJSRuntime ThisJsRuntime { get; set; }

    protected override void OnInitialized()
    {
        loginResultAction = LoginComplete;
        logoutResultAction = LogoutComplete;
        updateUserAction = AutoUpdateUser;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await ThisJsRuntime.InvokeVoidAsync("isUserFBLoggedIn");
            }
            catch (Exception e)
            {
                _responseMsg = e.Message;
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task SubmitLogin()
    {
        try
        {
            showLoader = true;
            this.StateHasChanged();
            await ThisJsRuntime.InvokeVoidAsync("fbLogin");
            _responseMsg = "";
        }
        catch (Exception e)
        {
            _responseMsg = e.Message;
        }
    }

    private async Task SubmitLogout()
    {
        try
        {
            showLoader = true;
            this.StateHasChanged();
            await ThisJsRuntime.InvokeVoidAsync("fbLogout");
        }
        catch (Exception e)
        {
            _responseMsg = e.Message;
        }
    }

    [JSInvokable]
    public static void LoginResult(bool loggedin)
    {
        loginResultAction.Invoke(loggedin);
    }

    [JSInvokable]
    public static void LogoutResult(bool loggedin)
    {
        logoutResultAction.Invoke(loggedin);
    }

    [JSInvokable]
    public static void UpdateUser(string email)
    {
        updateUserAction.Invoke(email);
    }

    private void LoginComplete(bool loggedIn)
    {

        if (loggedIn)
        {
            Helpers.SessionState.UserLoggedIn = true;
            this.OnLogin?.Invoke();
            _responseMsg = "";
        }

        showLoader = false;
        this.StateHasChanged();
    }

    private void LogoutComplete(bool success)
    {
        if (success)
        {
            Helpers.SessionState.UserLoggedIn = false;
            this.OnLogout?.Invoke();
            _responseMsg = "";
        }

        showLoader = false;
        this.StateHasChanged();
    }

    private async void AutoUpdateUser(string email)
    {
        UserAccount user = new UserAccount
        {
            Email = email
        };

        Helpers.HttpPostHelper<UserAccount> req = new Helpers.HttpPostHelper<UserAccount>("Accounts/UpdateUser", user);

        BasicHttpResponse<UserAccount> resp = await req.SendAsync<UserAccount>(Http);

        if (resp.Ok)
        {
            Helpers.SessionState.UserLoggedIn = true;
            Helpers.SessionState.User = resp.Data;
            this.OnLogin?.Invoke();
        }
        else
        {
            _responseMsg = resp.Message;
        }

        showLoader = false;
        this.StateHasChanged();
    }
}
